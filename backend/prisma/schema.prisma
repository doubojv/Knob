generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id_user Int      @id @default(autoincrement())
  nome    String   @unique @db.VarChar(255)
  email   String   @unique(map: "email") @db.VarChar(255)
  senha   String   @db.VarChar(255)

  watchlist       Watchlist[]
  favorite        Favorite[]
  review          Review[]
  rating          Rating[]
  log             Log[]
  friendsSent     Friendship[] @relation("friends_sent")
  friendsReceived Friendship[] @relation("friends_received")
}

model Shows {
  id_show           Int      @id @default(autoincrement())
  tmdbId            Int      @unique
  name              String
  originalName      String?
  posterPath        String?
  backdropPath      String?
  overview          String?  @db.Text
  firstAirDate      DateTime?
  lastAirDate       DateTime?
  numberOfSeasons   Int?
  numberOfEpisodes  Int?
  episodeRunTime    Json?    // array of integers
  inProduction      Boolean?
  creators          Json?    // Array of { id, name, profile_path }
  cast              Json?    // Array of cast members from /credits endpoint
  genres            Json?    // Array of { id, name }
  category          String   @default("Other") // "Drama" | "Comedy" | "Drama, Comedy" | "Other"
  networks          Json?    // Array of { id, name, logo_path, origin_country }
  productionCompanies Json?  // Array of { id, name, logo_path, origin_country }
  originCountry     Json?    // Array of country codes
  originalLanguage  String?
  spokenLanguages   Json?    // Array of { english_name, iso_639_1, name }
  popularity        Float?
  status            String?  // e.g., "Ended", "Running"
  tagline           String?
  type              String?
  voteAverage       Float?
  voteCount         Int?
  adult             Boolean?
  homepage          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  seasons           Season[]
  watchlist         Watchlist[]
  favorite          Favorite[]
  review            Review[]
  rating            Rating[]
  log               Log[]
}

model Season {
  id_season        Int      @id @default(autoincrement())
  tmdbId           Int      @unique
  showId           Int
  name             String
  overview         String?  @db.Text
  seasonNumber     Int
  airDate          DateTime?
  posterPath       String?
  voteAverage      Float?
  numberOfEpisodes Int?
  

  show             Shows     @relation(fields: [showId], references: [id_show])
  episodes         Episode[]
  review           Review[]
  rating           Rating[]
  log              Log[]
}

model Episode {
  id             Int       @id @default(autoincrement())
  tmdbId         Int       @unique
  seasonId       Int
  name           String
  overview       String?   @db.Text
  episodeNumber  Int
  airDate        DateTime?
  stillPath      String?
  runtime        Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  season         Season    @relation(fields: [seasonId], references: [id_season])
}

model Watchlist {
  id      Int      @id @default(autoincrement())
  id_user Int
  id_show Int
  date    DateTime @default(now())

  user User @relation(fields: [id_user], references: [id_user])
  show Shows @relation(fields: [id_show], references: [id_show])

  @@unique([id_user, id_show])
}

model Favorite {
  id      Int      @id @default(autoincrement())
  id_user Int
  id_show Int
  date    DateTime @default(now())

  user User @relation(fields: [id_user], references: [id_user])
  show Shows @relation(fields: [id_show], references: [id_show])

  @@unique([id_user, id_show])
}

model Review {
  id          Int      @id @default(autoincrement())
  id_user     Int
  id_show     Int?
  id_season   Int?
  id_rating   Int?
  content    String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [id_user], references: [id_user])
  show       Shows?    @relation(fields: [id_show], references: [id_show])
  season     Season?  @relation(fields: [id_season], references: [id_season])
  rating     Rating?  @relation(fields: [id_rating], references: [id])
  log        Log[]
}

model Rating {
  id          Int      @id @default(autoincrement())
  id_user     Int
  id_show     Int?
  id_season   Int?
  rating      Float    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User     @relation(fields: [id_user], references: [id_user])
  show       Shows?    @relation(fields: [id_show], references: [id_show])
  season     Season?  @relation(fields: [id_season], references: [id_season])
  review     Review[] 
  log        Log[]

  @@unique([id_user, id_show])
  @@unique([id_user, id_season])
}

model Log {
  id          Int       @id @default(autoincrement())
  id_user     Int
  id_show     Int?
  id_season   Int?
  id_review   Int?
  id_rating   Int?
  watchedAt   DateTime  @default(now())
  rewatch     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [id_user], references: [id_user])
  show        Shows?     @relation(fields: [id_show], references: [id_show])
  season      Season?   @relation(fields: [id_season], references: [id_season])
  review      Review?   @relation(fields: [id_review], references: [id])
  rating      Rating?   @relation(fields: [id_rating], references: [id])
}

model Friendship {
  id           Int      @id @default(autoincrement())
  id_user      Int
  id_friend    Int
  status       String   @default("pending") // pending | accepted | refused
  createdAt    DateTime @default(now())

  user   User @relation("friends_sent", fields: [id_user], references: [id_user])
  friend User @relation("friends_received", fields: [id_friend], references: [id_user])

  @@unique([id_user, id_friend]) 
}