generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Favorite {
  id_user Int
  id_show Int
  data    DateTime @db.Date

  @@id([id_user, id_show])
  @@index([id_show], map: "id_show")
}

model RateSeason {
  id_rate   Int      @id @default(autoincrement())
  id_user   Int
  id_season Int
  nota      Int
  review    String?  @db.Text
  date      DateTime @db.Date

  @@index([id_season], map: "id_season")
  @@index([id_user], map: "id_user")
}

model RateShow {
  id_rate Int      @id @default(autoincrement())
  id_user Int
  id_show Int
  nota    Int
  review  String?  @db.Text
  date    DateTime @db.Date

  @@index([id_show], map: "id_show")
  @@index([id_user], map: "id_user")
}

model Season {
  id           Int      @id @default(autoincrement())
  tmdbId       Int      @unique
  showId       Int
  name         String
  overview     String?  @db.Text
  seasonNumber Int
  airDate      DateTime?
  posterPath   String?
  voteAverage  Float?

  show         Show     @relation(fields: [showId], references: [id])
  episodes     Episode[]
}

model Show {
  id            Int      @id @default(autoincrement())
  tmdbId        Int      @unique
  name          String
  posterPath    String?
  backdropPath  String?
  overview      String?  @db.Text
  firstAirDate  DateTime?
  voteAverage   Float?
  voteCount     Int?
  genre         String?
  status        String?
  tagline       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  seasons       Season[]
  reviews       Review[]
}

model User {
  id_user Int @id @default(autoincrement())
  nome    String   @db.VarChar(255)
  email   String   @unique(map: "email") @db.VarChar(255)
  senha   String   @db.VarChar(255)

  reviews Review[]
}

model Watchlist {
  id_user Int
  id_show Int
  date    DateTime @db.Date

  @@id([id_user, id_show])
  @@index([id_show], map: "id_show")
}

model Episode {
  id             Int       @id @default(autoincrement())
  tmdbId         Int       @unique
  seasonId       Int
  name           String
  overview       String?   @db.Text
  episodeNumber  Int
  airDate        DateTime?
  stillPath      String?
  runtime        Int?
  voteAverage    Float?
  voteCount      Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  season         Season    @relation(fields: [seasonId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  showId    Int
  userId    Int
  content   String
  rating    Int
  createdAt DateTime @default(now())

  show      Show     @relation(fields: [showId], references: [id])
  user      User     @relation(fields: [userId], references: [id_user])
}
